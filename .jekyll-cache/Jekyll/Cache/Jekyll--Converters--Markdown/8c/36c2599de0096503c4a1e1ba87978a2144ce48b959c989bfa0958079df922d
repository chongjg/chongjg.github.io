I"E'<p><strong>(持续更新中…)</strong></p>

<h2 id="telea">TELEA</h2>

<ul>
  <li>
    <p><strong><a href="http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.98.5505&amp;rep=rep1&amp;type=pdf">原论文下载</a>；<a href="https://github.com/chongjg/Image-Inpainting/blob/master/paper/An%20Image%20Inpainting%20Technique%20Based%20on%20the%20Fast%20Marching%20Method.pdf">带笔记论文下载</a></strong></p>
  </li>
  <li>
    <p>这个算法是opencv自带的图像修复算法，直接说算法的流程吧：</p>
  </li>
</ul>

<h4 id="1区域划分">1.区域划分</h4>

<ul>
  <li>把每个像素标记为<strong>KNOWN、BAND、INSIDE</strong>三种</li>
</ul>

<ol>
  <li>
    <p><strong>INSIDE</strong>：待修复的像素，表示是待修复的块的内部像素。</p>
  </li>
  <li>
    <p><strong>BAND</strong>：与待修复的像素相邻的已知像素，表示块的边界。</p>
  </li>
  <li>
    <p><strong>KNOWN</strong>：其他已知像素。</p>
  </li>
</ol>

<p><img src="https://raw.githubusercontent.com/chongjg/chongjg.github.io/master/img/Image-Inpainting/inpainting-principle.png" alt="" /></p>

<ul>
  <li>如上图(a)所示，圈内是待修复部分<strong>INSIDE</strong>，圈外是已知部分<strong>KNOWN</strong>，圈就是<strong>BAND</strong>。</li>
</ul>

<h4 id="2修复单个像素">2.修复单个像素</h4>

<ul>
  <li>
    <p>考虑修复一个与<strong>BAND</strong>相邻的未知点<script type="math/tex">p</script>，如上图(b)所示，对于附近某一个已知(<strong>BAND和KNOWN</strong>)的点<script type="math/tex">q</script>，可以通过<script type="math/tex">p=I(q)+\nabla I(q)*(p-q)</script>来预测待修复点<script type="math/tex">p</script>。</p>
  </li>
  <li>
    <p>基于这个思路，可以以<script type="math/tex">p</script>为圆心<script type="math/tex">\varepsilon</script>为半径画一个圆，如上图(a)，圆内已知像素集合记为<script type="math/tex">B_\varepsilon(p)</script>，对于任意<script type="math/tex">q\in B_\varepsilon</script>都会对<script type="math/tex">I(p)</script>有一个预测值，对每一个预测赋予合适的权值<script type="math/tex">w(p,q)</script>，最后用归一化加权预测结果作为像素修复的值，且此后将像素视为已知，继续修复下一个像素。</p>
  </li>
</ul>

<script type="math/tex; mode=display">I(p)=\frac{\underset{q\in B_\varepsilon(p)}{\sum}w(p,q)[I(q)+\nabla I(q)(p-q)]}{\underset{q\in B_\varepsilon(p)}{\sum} w(p,q)}</script>

<h4 id="3修复顺序">3.修复顺序</h4>

<ul>
  <li>
    <p>前面已经提到是一个一个像素修复，而顺序则是沿着边界往中心蔓延挨个修复。</p>
  </li>
  <li>
    <p>令<script type="math/tex">T(p)</script>表示像素<script type="math/tex">p</script>离<strong>BAND</strong>的最近距离，就可以通过<script type="math/tex">T(p)</script>从小到大修复未知的像素。（<script type="math/tex">T</script>相等的点连起来可看做等高线）</p>
  </li>
  <li>
    <p><script type="math/tex">T(p)</script>通过求解下面方程得到，实际上不是严格的距离。</p>
  </li>
</ul>

<script type="math/tex; mode=display">\vert\nabla T\vert=1,\quad with\; T=0\; in\; BAND</script>

<ul>
  <li>数值求解方法如下：</li>
</ul>

<script type="math/tex; mode=display">\max(D^{-x}T,-D^{+x}T,0)^2+\max(D^{-y}T,-D^{+y}T,0)^2=1</script>

<ul>
  <li>其中:(<script type="math/tex">D^{\pm y}</script>类似)</li>
</ul>

<script type="math/tex; mode=display">D^{-x}T(i,j)=T(i,j)-T(i-1,j)</script>

<script type="math/tex; mode=display">D^{+x}T(i,j)=T(i+1,j)-T(i,j)</script>

<ul>
  <li>令<script type="math/tex">T_0=T(i,j),T_1=T(i+\Delta i,j),T_2=T(i,j+\Delta j)</script>，则有：</li>
</ul>

<script type="math/tex; mode=display">% <![CDATA[
\begin{aligned}
(T_0-T_1)^2+(T_0-T_2)^2=&1\\
2T_0^2-2(T_1+T_2)T_0+T_1^2+T_2^2-1=&0\\
\end{aligned} %]]></script>

<ul>
  <li>解一元二次方程得：</li>
</ul>

<script type="math/tex; mode=display">T_0=\frac{(T_1+T_2)\pm\sqrt{(2-(T_1-T_2)^2)}}{2}</script>

<ul>
  <li>
    <p>通过上面的更新距离方法，再结合最短路算法SPFA可以得到所有<script type="math/tex">T</script>值（这种结合可能不太严谨，但是无伤大雅）</p>
  </li>
  <li>
    <p>此时对于<strong>KNOWN</strong>类型的点将 <script type="math/tex">T</script> 取反，这样通过 <script type="math/tex">T</script> 相减就有等高线差值的意义了。</p>
  </li>
  <li>
    <p>最后使用<script type="math/tex">3\times 3\; tent\; filter</script>处理 <script type="math/tex">T</script>，在网上查了一下这里的<script type="math/tex">tent\; filter</script>可能是指如下函数：</p>
  </li>
</ul>

<script type="math/tex; mode=display">f(x)=\left\{
\begin{aligned}
1-\vert x\vert, \vert x\vert\leq 1\\
0, \vert x\vert >1
\end{aligned}
\right.</script>

<ul>
  <li>扩展到二维我在代码里直接用的3*3高斯核。</li>
</ul>

<h4 id="4权值设置">4.权值设置</h4>

<ul>
  <li>考虑待修复点<script type="math/tex">p</script>及已知点<script type="math/tex">q\in B_\varepsilon(p)</script></li>
</ul>

<p>1.方向部分：<script type="math/tex">\nabla T</script>的方向如果和 <script type="math/tex">(p-q)</script> 的方向一致，则给予更大权重，设置为两者的点积。</p>

<script type="math/tex; mode=display">dir(p,q)=\frac{p-q}{\parallel p-q\parallel}\cdot \nabla T</script>

<p>2.距离部分：<script type="math/tex">p</script> 和 <script type="math/tex">q</script> 距离越远，权重越小，设置为距离平方的倒数</p>

<script type="math/tex; mode=display">dst(p,q)=\frac{d_0^2}{\parallel p-q\parallel^2}</script>

<p>3.等高线部分：<script type="math/tex">T(p)</script>和<script type="math/tex">T(q)</script>差距越大，权重越小</p>

<script type="math/tex; mode=display">lev(p,q)=\frac{T_0}{1+\vert T(p)-T(q)\vert}</script>

<ul>
  <li>权重则设置为三者乘积</li>
</ul>

<script type="math/tex; mode=display">w(p,q)=dir(p,q)*dst(p,q)*lev(p,q)</script>

<h4 id="实验结果及代码">实验结果及代码</h4>

<ul>
  <li>
    <p>（一开始想着熟悉C++的优先队列就用C++实现，现在想想真是脑抽，写完加调试花了大概十个小时，Matlab它不香吗</p>
  </li>
  <li>
    <p>自己写的效果和opencv自带函数相比有一定的差距，可能代码还有小bug或者具体实现和作者还有点出入，但是已经不想折腾了。</p>
  </li>
  <li>
    <p>从左到右分别是原图，opencv结果，我自己写的代码结果。(代码见附录)</p>
  </li>
</ul>

<p><img src="https://raw.githubusercontent.com/chongjg/chongjg.github.io/master/img/Image-Inpainting/TELEA-result.jpg" alt="" /></p>

<h2 id="附录">附录</h2>

<div class="language-c++ highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include "opencv2/imgproc.hpp"
</span>
<span class="cp">#include "opencv2/highgui.hpp"
</span>
<span class="cp">#include "opencv2/photo.hpp"
</span>
<span class="cp">#include&lt;cmath&gt;
</span>
<span class="cp">#include&lt;queue&gt;
</span>
<span class="cp">#include&lt;cstdio&gt;
</span>
<span class="cp">#include&lt;cstring&gt;
</span>
<span class="cp">#include&lt;cstdlib&gt;
</span>
<span class="cp">#include&lt;iostream&gt;
</span>
<span class="cp">#include&lt;algorithm&gt;
</span>
<span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
<span class="k">using</span> <span class="k">namespace</span> <span class="n">cv</span><span class="p">;</span>

<span class="cp">#define KNOWN 0
</span>
<span class="cp">#define BAND 1
</span>
<span class="cp">#define INSIDE 2
</span>
<span class="cp">#define epsilon 6
</span>
<span class="cp">#define X first
</span>
<span class="cp">#define Y second
</span>
<span class="k">const</span> <span class="kt">int</span> <span class="n">To</span><span class="p">[</span><span class="mi">4</span><span class="p">][</span><span class="mi">2</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span> <span class="p">{</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">},</span> <span class="p">{</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">},</span> <span class="p">{</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">},</span> <span class="p">{</span><span class="mi">0</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">}</span> <span class="p">};</span>

<span class="kt">int</span> <span class="n">B</span><span class="p">[</span><span class="n">epsilon</span> <span class="o">*</span> <span class="n">epsilon</span> <span class="o">*</span> <span class="mi">4</span> <span class="o">+</span> <span class="mi">1</span><span class="p">][</span><span class="mi">2</span><span class="p">];</span>
<span class="kt">int</span> <span class="n">Btop</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>

<span class="n">string</span> <span class="n">img_path</span> <span class="o">=</span> <span class="s">"/home/chongjg/Desktop/image-inpainting/image/"</span><span class="p">;</span>
<span class="n">string</span> <span class="n">output_path</span> <span class="o">=</span> <span class="s">"/home/chongjg/Desktop/image-inpainting/output/"</span><span class="p">;</span>

<span class="n">Mat</span> <span class="n">img</span><span class="p">,</span> <span class="n">mask</span><span class="p">;</span>

<span class="kt">int</span> <span class="n">N</span><span class="p">,</span> <span class="n">M</span><span class="p">;</span>

<span class="kt">char</span><span class="o">*</span> <span class="n">f</span><span class="p">;</span>
<span class="kt">float</span><span class="o">*</span> <span class="n">T</span><span class="p">;</span>
<span class="kt">bool</span><span class="o">*</span> <span class="n">vis</span><span class="p">;</span>

<span class="kt">bool</span> <span class="nf">Check</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="p">,</span> <span class="kt">int</span> <span class="n">j</span><span class="p">){</span> <span class="k">return</span> <span class="mi">0</span> <span class="o">&lt;=</span> <span class="n">i</span> <span class="o">&amp;&amp;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">N</span> <span class="o">&amp;&amp;</span> <span class="mi">0</span> <span class="o">&lt;=</span> <span class="n">j</span> <span class="o">&amp;&amp;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">M</span><span class="p">;</span> <span class="p">}</span>

<span class="kt">void</span> <span class="nf">create_mask</span><span class="p">(</span><span class="n">Mat</span> <span class="o">&amp;</span><span class="n">img</span><span class="p">,</span> <span class="n">string</span> <span class="o">&amp;</span><span class="n">img_path</span><span class="p">){</span>
    <span class="kt">int</span> <span class="n">width</span> <span class="o">=</span> <span class="mi">30</span><span class="p">;</span>
    <span class="kt">int</span> <span class="n">interval</span> <span class="o">=</span> <span class="mi">3</span><span class="p">;</span>
    <span class="n">mask</span> <span class="o">=</span> <span class="n">Mat</span><span class="p">(</span><span class="n">img</span><span class="p">.</span><span class="n">rows</span><span class="p">,</span> <span class="n">img</span><span class="p">.</span><span class="n">cols</span><span class="p">,</span> <span class="n">CV_8UC1</span><span class="p">);</span>
    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">img</span><span class="p">.</span><span class="n">rows</span><span class="p">;</span> <span class="n">i</span> <span class="o">++</span><span class="p">)</span>
        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">img</span><span class="p">.</span><span class="n">cols</span><span class="p">;</span> <span class="n">j</span> <span class="o">++</span><span class="p">)</span>
            <span class="n">mask</span><span class="p">.</span><span class="n">at</span><span class="o">&lt;</span><span class="n">uchar</span><span class="o">&gt;</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">)</span> <span class="o">=</span> <span class="p">(((</span><span class="n">i</span> <span class="o">/</span> <span class="n">width</span><span class="p">)</span> <span class="o">%</span> <span class="n">interval</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="o">&amp;</span> <span class="p">((</span><span class="n">j</span> <span class="o">/</span> <span class="n">width</span><span class="p">)</span> <span class="o">%</span> <span class="n">interval</span> <span class="o">==</span> <span class="mi">0</span><span class="p">))</span> <span class="o">*</span> <span class="mi">255</span><span class="p">;</span>
    <span class="n">imwrite</span><span class="p">(</span><span class="n">img_path</span> <span class="o">+</span> <span class="s">"mask.jpg"</span><span class="p">,</span> <span class="n">mask</span><span class="p">);</span>
<span class="p">}</span>

<span class="k">struct</span> <span class="n">BandPixel</span><span class="p">{</span>

    <span class="kt">float</span> <span class="n">T</span><span class="p">;</span>
    <span class="kt">int</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">;</span>

    <span class="n">BandPixel</span><span class="p">(){}</span>
    <span class="n">BandPixel</span><span class="p">(</span><span class="kt">float</span> <span class="n">T</span><span class="p">,</span> <span class="kt">int</span> <span class="n">x</span><span class="p">,</span> <span class="kt">int</span> <span class="n">y</span><span class="p">)</span> <span class="o">:</span> <span class="n">T</span><span class="p">(</span><span class="n">T</span><span class="p">),</span> <span class="n">x</span><span class="p">(</span><span class="n">x</span><span class="p">),</span> <span class="n">y</span><span class="p">(</span><span class="n">y</span><span class="p">)</span> <span class="p">{}</span>

<span class="p">};</span>

<span class="kt">bool</span> <span class="k">operator</span> <span class="o">&lt;</span> <span class="p">(</span><span class="k">const</span> <span class="n">BandPixel</span> <span class="o">&amp;</span><span class="n">a</span><span class="p">,</span> <span class="k">const</span> <span class="n">BandPixel</span> <span class="o">&amp;</span><span class="n">b</span><span class="p">){</span><span class="k">return</span> <span class="n">a</span><span class="p">.</span><span class="n">T</span> <span class="o">&gt;</span> <span class="n">b</span><span class="p">.</span><span class="n">T</span><span class="p">;}</span>

<span class="kt">float</span> <span class="nf">solEqua</span><span class="p">(</span><span class="kt">int</span> <span class="n">i1</span><span class="p">,</span> <span class="kt">int</span> <span class="n">j1</span><span class="p">,</span> <span class="kt">int</span> <span class="n">i2</span><span class="p">,</span> <span class="kt">int</span> <span class="n">j2</span><span class="p">){</span>
    <span class="k">static</span> <span class="kt">float</span> <span class="n">r</span><span class="p">,</span> <span class="n">s</span><span class="p">,</span> <span class="n">T1</span><span class="p">,</span> <span class="n">T2</span><span class="p">;</span>
    <span class="kt">float</span> <span class="n">re</span> <span class="o">=</span> <span class="mf">1e6</span><span class="p">;</span>
    <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="n">Check</span><span class="p">(</span><span class="n">i1</span><span class="p">,</span> <span class="n">j1</span><span class="p">)</span> <span class="o">||</span> <span class="o">!</span><span class="n">Check</span><span class="p">(</span><span class="n">i2</span><span class="p">,</span> <span class="n">j2</span><span class="p">))</span>
        <span class="k">return</span> <span class="n">re</span><span class="p">;</span>
    <span class="n">T1</span> <span class="o">=</span> <span class="n">T</span><span class="p">[</span><span class="n">i1</span> <span class="o">*</span> <span class="n">M</span> <span class="o">+</span> <span class="n">j1</span><span class="p">],</span> <span class="n">T2</span> <span class="o">=</span> <span class="n">T</span><span class="p">[</span><span class="n">i2</span> <span class="o">*</span> <span class="n">M</span> <span class="o">+</span> <span class="n">j2</span><span class="p">];</span>
    <span class="k">if</span><span class="p">(</span><span class="n">T1</span> <span class="o">&lt;</span> <span class="mf">1e6</span><span class="p">){</span>
        <span class="k">if</span><span class="p">(</span><span class="n">T2</span> <span class="o">&lt;</span> <span class="mf">1e6</span><span class="p">){</span>
            <span class="n">r</span> <span class="o">=</span> <span class="n">sqrt</span><span class="p">(</span><span class="mi">2</span> <span class="o">-</span> <span class="p">(</span><span class="n">T1</span> <span class="o">-</span> <span class="n">T2</span><span class="p">)</span> <span class="o">*</span> <span class="p">(</span><span class="n">T1</span> <span class="o">-</span> <span class="n">T2</span><span class="p">));</span>
            <span class="n">s</span> <span class="o">=</span> <span class="p">(</span><span class="n">T1</span> <span class="o">+</span> <span class="n">T2</span> <span class="o">-</span> <span class="n">r</span><span class="p">)</span> <span class="o">/</span> <span class="mi">2</span><span class="p">;</span>
            <span class="k">if</span><span class="p">(</span><span class="n">s</span> <span class="o">&gt;=</span> <span class="n">max</span><span class="p">(</span><span class="n">T1</span><span class="p">,</span> <span class="n">T2</span><span class="p">))</span>
                <span class="n">re</span> <span class="o">=</span> <span class="n">s</span><span class="p">;</span>
            <span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="n">s</span> <span class="o">+</span> <span class="n">r</span> <span class="o">&gt;=</span> <span class="n">max</span><span class="p">(</span><span class="n">T1</span><span class="p">,</span> <span class="n">T2</span><span class="p">))</span>
                <span class="n">re</span> <span class="o">=</span> <span class="n">s</span> <span class="o">+</span> <span class="n">r</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="k">else</span>
            <span class="n">re</span> <span class="o">=</span> <span class="mi">1</span> <span class="o">+</span> <span class="n">T1</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="n">T2</span> <span class="o">&lt;</span> <span class="mf">1e6</span><span class="p">)</span>
        <span class="n">re</span> <span class="o">=</span> <span class="mi">1</span> <span class="o">+</span> <span class="n">T2</span><span class="p">;</span>
    <span class="k">return</span> <span class="n">re</span><span class="p">;</span>
<span class="p">}</span>

<span class="kt">void</span> <span class="nf">TentFilter</span><span class="p">(){</span>
    <span class="k">const</span> <span class="kt">int</span> <span class="n">kernal</span><span class="p">[]</span> <span class="o">=</span> <span class="p">{</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">1</span><span class="p">};</span>
    <span class="k">const</span> <span class="kt">int</span> <span class="n">idx</span><span class="p">[</span><span class="mi">9</span><span class="p">][</span><span class="mi">2</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span> <span class="p">{</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">},</span> <span class="p">{</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">},</span> <span class="p">{</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">},</span> <span class="p">{</span><span class="mi">0</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">},</span> <span class="p">{</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">},</span> <span class="p">{</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">},</span> <span class="p">{</span><span class="mi">1</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">},</span> <span class="p">{</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">},</span> <span class="p">{</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">}</span> <span class="p">};</span>
    <span class="kt">float</span><span class="o">*</span> <span class="n">tmp</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">float</span><span class="p">[</span><span class="n">N</span> <span class="o">*</span> <span class="n">M</span><span class="p">];</span>
    <span class="n">memset</span><span class="p">(</span><span class="n">tmp</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="kt">float</span><span class="p">)</span> <span class="o">*</span> <span class="n">N</span> <span class="o">*</span> <span class="n">M</span><span class="p">);</span>
    <span class="kt">int</span> <span class="n">ii</span><span class="p">,</span> <span class="n">jj</span><span class="p">,</span> <span class="n">w</span><span class="p">;</span>
    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">N</span><span class="p">;</span> <span class="n">i</span> <span class="o">++</span><span class="p">)</span>
        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">M</span><span class="p">;</span> <span class="n">j</span> <span class="o">++</span><span class="p">){</span>
            <span class="n">w</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
            <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">k</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">k</span> <span class="o">&lt;</span> <span class="mi">9</span><span class="p">;</span> <span class="n">k</span> <span class="o">++</span><span class="p">){</span>
                <span class="n">ii</span> <span class="o">=</span> <span class="n">i</span> <span class="o">+</span> <span class="n">idx</span><span class="p">[</span><span class="n">k</span><span class="p">][</span><span class="mi">0</span><span class="p">];</span>
                <span class="n">jj</span> <span class="o">=</span> <span class="n">j</span> <span class="o">+</span> <span class="n">idx</span><span class="p">[</span><span class="n">k</span><span class="p">][</span><span class="mi">1</span><span class="p">];</span>
                <span class="k">if</span><span class="p">(</span><span class="n">Check</span><span class="p">(</span><span class="n">ii</span><span class="p">,</span> <span class="n">jj</span><span class="p">))</span>
                    <span class="n">w</span> <span class="o">+=</span> <span class="n">kernal</span><span class="p">[</span><span class="n">k</span><span class="p">],</span> <span class="n">tmp</span><span class="p">[</span><span class="n">i</span> <span class="o">*</span> <span class="n">M</span> <span class="o">+</span> <span class="n">j</span><span class="p">]</span> <span class="o">+=</span> <span class="n">kernal</span><span class="p">[</span><span class="n">k</span><span class="p">]</span> <span class="o">*</span> <span class="n">T</span><span class="p">[</span><span class="n">ii</span> <span class="o">*</span> <span class="n">M</span> <span class="o">+</span> <span class="n">jj</span><span class="p">];</span>
            <span class="p">}</span>
            <span class="n">tmp</span><span class="p">[</span><span class="n">i</span> <span class="o">*</span> <span class="n">M</span> <span class="o">+</span> <span class="n">j</span><span class="p">]</span> <span class="o">/=</span> <span class="n">w</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">N</span> <span class="o">*</span> <span class="n">M</span><span class="p">;</span> <span class="n">i</span> <span class="o">++</span><span class="p">)</span>
        <span class="n">T</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">tmp</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
<span class="p">}</span>

<span class="n">priority_queue</span><span class="o">&lt;</span><span class="n">BandPixel</span><span class="o">&gt;</span> <span class="n">NarrowBand</span><span class="p">;</span>
<span class="n">queue</span><span class="o">&lt;</span><span class="n">pair</span><span class="o">&lt;</span><span class="kt">int</span><span class="p">,</span> <span class="kt">int</span><span class="o">&gt;</span> <span class="o">&gt;</span> <span class="n">ToBeInpainted</span><span class="p">;</span>

<span class="kt">void</span> <span class="nf">Init</span><span class="p">(){</span>
    <span class="kt">int</span> <span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">;</span>
    
    <span class="c1">//initiate B</span>

    <span class="k">for</span><span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="o">-</span><span class="n">epsilon</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="n">epsilon</span><span class="p">;</span> <span class="n">i</span> <span class="o">++</span><span class="p">)</span>
        <span class="k">for</span><span class="p">(</span><span class="n">j</span> <span class="o">=</span> <span class="o">-</span><span class="n">epsilon</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;=</span> <span class="n">epsilon</span><span class="p">;</span> <span class="n">j</span> <span class="o">++</span><span class="p">)</span>
            <span class="k">if</span><span class="p">(</span><span class="n">i</span> <span class="o">*</span> <span class="n">i</span> <span class="o">+</span> <span class="n">j</span> <span class="o">*</span> <span class="n">j</span> <span class="o">&lt;=</span> <span class="n">epsilon</span> <span class="o">*</span> <span class="n">epsilon</span><span class="p">){</span>
                <span class="n">Btop</span> <span class="o">++</span><span class="p">;</span>
                <span class="n">B</span><span class="p">[</span><span class="n">Btop</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="n">i</span><span class="p">;</span>
                <span class="n">B</span><span class="p">[</span><span class="n">Btop</span><span class="p">][</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="n">j</span><span class="p">;</span>
            <span class="p">}</span>

    <span class="c1">// input image &amp; mask</span>
    
    <span class="n">img</span> <span class="o">=</span> <span class="n">imread</span><span class="p">(</span><span class="n">img_path</span> <span class="o">+</span> <span class="s">"test.jpg"</span><span class="p">);</span>
    <span class="n">create_mask</span><span class="p">(</span><span class="n">img</span><span class="p">,</span> <span class="n">img_path</span><span class="p">);</span>

    <span class="n">N</span> <span class="o">=</span> <span class="n">img</span><span class="p">.</span><span class="n">rows</span><span class="p">;</span>
    <span class="n">M</span> <span class="o">=</span> <span class="n">img</span><span class="p">.</span><span class="n">cols</span><span class="p">;</span>

    <span class="c1">// initiate f</span>
    
    <span class="n">f</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">char</span><span class="p">[</span><span class="n">N</span> <span class="o">*</span> <span class="n">M</span><span class="p">];</span>
    <span class="n">memset</span><span class="p">(</span><span class="n">f</span><span class="p">,</span> <span class="n">KNOWN</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="kt">char</span><span class="p">)</span> <span class="o">*</span> <span class="n">N</span> <span class="o">*</span> <span class="n">M</span><span class="p">);</span>

    <span class="k">for</span><span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">N</span><span class="p">;</span> <span class="n">i</span> <span class="o">++</span><span class="p">)</span>
        <span class="k">for</span><span class="p">(</span><span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">M</span><span class="p">;</span> <span class="n">j</span> <span class="o">++</span><span class="p">){</span>
            <span class="k">if</span><span class="p">(</span><span class="n">mask</span><span class="p">.</span><span class="n">at</span><span class="o">&lt;</span><span class="n">uchar</span><span class="o">&gt;</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span>
                <span class="k">continue</span><span class="p">;</span>
            <span class="n">f</span><span class="p">[</span><span class="n">i</span> <span class="o">*</span> <span class="n">M</span> <span class="o">+</span> <span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="n">INSIDE</span><span class="p">;</span>
            <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">k</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">k</span> <span class="o">&lt;</span> <span class="mi">4</span><span class="p">;</span> <span class="n">k</span> <span class="o">++</span><span class="p">){</span>
                <span class="kt">int</span> <span class="n">ii</span> <span class="o">=</span> <span class="n">i</span> <span class="o">+</span> <span class="n">To</span><span class="p">[</span><span class="n">k</span><span class="p">][</span><span class="mi">0</span><span class="p">],</span> <span class="n">jj</span> <span class="o">=</span> <span class="n">j</span> <span class="o">+</span> <span class="n">To</span><span class="p">[</span><span class="n">k</span><span class="p">][</span><span class="mi">1</span><span class="p">];</span>
                <span class="k">if</span><span class="p">(</span><span class="n">Check</span><span class="p">(</span><span class="n">ii</span><span class="p">,</span> <span class="n">jj</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="n">f</span><span class="p">[</span><span class="n">ii</span> <span class="o">*</span> <span class="n">M</span> <span class="o">+</span> <span class="n">jj</span><span class="p">]</span> <span class="o">==</span> <span class="n">KNOWN</span><span class="p">)</span>
                    <span class="n">f</span><span class="p">[</span><span class="n">ii</span> <span class="o">*</span> <span class="n">M</span> <span class="o">+</span> <span class="n">jj</span><span class="p">]</span> <span class="o">=</span> <span class="n">BAND</span><span class="p">;</span>
            <span class="p">}</span>
        <span class="p">}</span>

    <span class="c1">// initiate NarrowBand &amp; T</span>

    <span class="n">BandPixel</span> <span class="n">t</span><span class="p">;</span>

    <span class="n">T</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">float</span><span class="p">[</span><span class="n">N</span> <span class="o">*</span> <span class="n">M</span><span class="p">];</span>
    <span class="n">memset</span><span class="p">(</span><span class="n">T</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="kt">float</span><span class="p">)</span> <span class="o">*</span> <span class="n">N</span> <span class="o">*</span> <span class="n">M</span><span class="p">);</span>

    <span class="k">for</span><span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">N</span><span class="p">;</span> <span class="n">i</span> <span class="o">++</span><span class="p">)</span>
        <span class="k">for</span><span class="p">(</span><span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">M</span><span class="p">;</span> <span class="n">j</span> <span class="o">++</span><span class="p">)</span>
            <span class="k">if</span><span class="p">(</span><span class="n">f</span><span class="p">[</span><span class="n">i</span> <span class="o">*</span> <span class="n">M</span> <span class="o">+</span> <span class="n">j</span><span class="p">]</span> <span class="o">==</span> <span class="n">BAND</span><span class="p">)</span>
                <span class="n">NarrowBand</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="n">BandPixel</span><span class="p">(</span><span class="n">T</span><span class="p">[</span><span class="n">i</span> <span class="o">*</span> <span class="n">M</span> <span class="o">+</span> <span class="n">j</span><span class="p">],</span> <span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">));</span>
            <span class="k">else</span>
                <span class="n">T</span><span class="p">[</span><span class="n">i</span> <span class="o">*</span> <span class="n">M</span> <span class="o">+</span> <span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="mf">1e6</span><span class="p">;</span>

    <span class="kt">bool</span> <span class="o">*</span><span class="n">vis</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">bool</span><span class="p">[</span><span class="n">N</span> <span class="o">*</span> <span class="n">M</span><span class="p">];</span>
    <span class="n">memset</span><span class="p">(</span><span class="n">vis</span><span class="p">,</span> <span class="nb">false</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="kt">bool</span><span class="p">)</span> <span class="o">*</span> <span class="n">N</span> <span class="o">*</span> <span class="n">M</span><span class="p">);</span>

    <span class="k">while</span><span class="p">(</span><span class="o">!</span><span class="n">NarrowBand</span><span class="p">.</span><span class="n">empty</span><span class="p">()){</span>
        <span class="n">t</span> <span class="o">=</span> <span class="n">NarrowBand</span><span class="p">.</span><span class="n">top</span><span class="p">();</span>
        <span class="n">NarrowBand</span><span class="p">.</span><span class="n">pop</span><span class="p">();</span>
        <span class="n">i</span> <span class="o">=</span> <span class="n">t</span><span class="p">.</span><span class="n">x</span><span class="p">,</span> <span class="n">j</span> <span class="o">=</span> <span class="n">t</span><span class="p">.</span><span class="n">y</span><span class="p">;</span>
        <span class="k">if</span><span class="p">(</span><span class="n">vis</span><span class="p">[</span><span class="n">i</span> <span class="o">*</span> <span class="n">M</span> <span class="o">+</span> <span class="n">j</span><span class="p">])</span>
            <span class="k">continue</span><span class="p">;</span>
        <span class="n">vis</span><span class="p">[</span><span class="n">i</span> <span class="o">*</span> <span class="n">M</span> <span class="o">+</span> <span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="nb">true</span><span class="p">;</span>
        <span class="n">ToBeInpainted</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="n">make_pair</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">));</span>
        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">k</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">k</span> <span class="o">&lt;</span> <span class="mi">4</span><span class="p">;</span> <span class="n">k</span> <span class="o">++</span><span class="p">){</span>
            <span class="kt">int</span> <span class="n">ii</span> <span class="o">=</span> <span class="n">i</span> <span class="o">+</span> <span class="n">To</span><span class="p">[</span><span class="n">k</span><span class="p">][</span><span class="mi">0</span><span class="p">],</span> <span class="n">jj</span> <span class="o">=</span> <span class="n">j</span> <span class="o">+</span> <span class="n">To</span><span class="p">[</span><span class="n">k</span><span class="p">][</span><span class="mi">1</span><span class="p">];</span>
            <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="n">Check</span><span class="p">(</span><span class="n">ii</span><span class="p">,</span> <span class="n">jj</span><span class="p">))</span>
                <span class="k">continue</span><span class="p">;</span>
            <span class="kt">float</span> <span class="n">tmpT</span> <span class="o">=</span> <span class="n">min</span><span class="p">(</span><span class="n">min</span><span class="p">(</span><span class="n">solEqua</span><span class="p">(</span><span class="n">ii</span> <span class="o">-</span> <span class="mi">1</span><span class="p">,</span> <span class="n">jj</span><span class="p">,</span> <span class="n">ii</span><span class="p">,</span> <span class="n">jj</span> <span class="o">-</span> <span class="mi">1</span><span class="p">),</span>
                                 <span class="n">solEqua</span><span class="p">(</span><span class="n">ii</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="n">jj</span><span class="p">,</span> <span class="n">ii</span><span class="p">,</span> <span class="n">jj</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)),</span>
                             <span class="n">min</span><span class="p">(</span><span class="n">solEqua</span><span class="p">(</span><span class="n">ii</span> <span class="o">-</span> <span class="mi">1</span><span class="p">,</span> <span class="n">jj</span><span class="p">,</span> <span class="n">ii</span><span class="p">,</span> <span class="n">jj</span> <span class="o">+</span> <span class="mi">1</span><span class="p">),</span>
                                 <span class="n">solEqua</span><span class="p">(</span><span class="n">ii</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="n">jj</span><span class="p">,</span> <span class="n">ii</span><span class="p">,</span> <span class="n">jj</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)));</span>
            <span class="n">tmpT</span> <span class="o">=</span> <span class="n">min</span><span class="p">(</span><span class="n">tmpT</span><span class="p">,</span> <span class="n">T</span><span class="p">[</span><span class="n">i</span> <span class="o">*</span> <span class="n">M</span> <span class="o">+</span> <span class="n">j</span><span class="p">]</span> <span class="o">+</span> <span class="mi">1</span><span class="p">);</span>
            <span class="k">if</span><span class="p">(</span><span class="n">tmpT</span> <span class="o">&lt;</span> <span class="n">T</span><span class="p">[</span><span class="n">ii</span> <span class="o">*</span> <span class="n">M</span> <span class="o">+</span> <span class="n">jj</span><span class="p">]){</span>
                <span class="n">T</span><span class="p">[</span><span class="n">ii</span> <span class="o">*</span> <span class="n">M</span> <span class="o">+</span> <span class="n">jj</span><span class="p">]</span> <span class="o">=</span> <span class="n">tmpT</span><span class="p">;</span>
                <span class="n">NarrowBand</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="n">BandPixel</span><span class="p">(</span><span class="n">T</span><span class="p">[</span><span class="n">ii</span> <span class="o">*</span> <span class="n">M</span> <span class="o">+</span> <span class="n">jj</span><span class="p">],</span> <span class="n">ii</span><span class="p">,</span> <span class="n">jj</span><span class="p">));</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="k">for</span><span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">N</span><span class="p">;</span> <span class="n">i</span> <span class="o">++</span><span class="p">)</span>
        <span class="k">for</span><span class="p">(</span><span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">M</span><span class="p">;</span> <span class="n">j</span> <span class="o">++</span><span class="p">)</span>
            <span class="k">if</span><span class="p">(</span><span class="n">f</span><span class="p">[</span><span class="n">i</span> <span class="o">*</span> <span class="n">M</span> <span class="o">+</span> <span class="n">j</span><span class="p">]</span> <span class="o">==</span> <span class="n">KNOWN</span><span class="p">)</span>
                <span class="n">T</span><span class="p">[</span><span class="n">i</span> <span class="o">*</span> <span class="n">M</span> <span class="o">+</span> <span class="n">j</span><span class="p">]</span> <span class="o">*=</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
    
    <span class="n">TentFilter</span><span class="p">();</span>
    
<span class="p">}</span>

<span class="n">pair</span><span class="o">&lt;</span><span class="kt">float</span><span class="p">,</span> <span class="kt">float</span><span class="o">&gt;</span> <span class="n">GradT</span><span class="p">(</span><span class="kt">int</span> <span class="n">x</span><span class="p">,</span> <span class="kt">int</span> <span class="n">y</span><span class="p">){</span>
    <span class="k">static</span> <span class="n">pair</span><span class="o">&lt;</span><span class="kt">float</span><span class="p">,</span> <span class="kt">float</span><span class="o">&gt;</span> <span class="n">re</span><span class="p">;</span>
    <span class="k">if</span><span class="p">(</span><span class="n">x</span> <span class="o">+</span> <span class="mi">1</span> <span class="o">&gt;=</span> <span class="n">N</span><span class="p">)</span>
        <span class="n">re</span><span class="p">.</span><span class="n">X</span> <span class="o">=</span> <span class="p">(</span><span class="n">T</span><span class="p">[</span><span class="n">x</span> <span class="o">*</span> <span class="n">M</span> <span class="o">+</span> <span class="n">y</span><span class="p">]</span> <span class="o">-</span> <span class="n">T</span><span class="p">[(</span><span class="n">x</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="o">*</span> <span class="n">M</span> <span class="o">+</span> <span class="n">y</span><span class="p">]);</span>
    <span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="n">x</span> <span class="o">-</span> <span class="mi">1</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span>
        <span class="n">re</span><span class="p">.</span><span class="n">X</span> <span class="o">=</span> <span class="p">(</span><span class="n">T</span><span class="p">[(</span><span class="n">x</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span> <span class="o">*</span> <span class="n">M</span> <span class="o">+</span> <span class="n">y</span><span class="p">]</span> <span class="o">-</span> <span class="n">T</span><span class="p">[</span><span class="n">x</span> <span class="o">*</span> <span class="n">M</span> <span class="o">+</span> <span class="n">y</span><span class="p">]);</span>
    <span class="k">else</span>
        <span class="n">re</span><span class="p">.</span><span class="n">X</span> <span class="o">=</span> <span class="p">(</span><span class="n">T</span><span class="p">[(</span><span class="n">x</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span> <span class="o">*</span> <span class="n">M</span> <span class="o">+</span> <span class="n">y</span><span class="p">]</span> <span class="o">-</span> <span class="n">T</span><span class="p">[(</span><span class="n">x</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="o">*</span> <span class="n">M</span> <span class="o">+</span> <span class="n">y</span><span class="p">])</span> <span class="o">/</span> <span class="mi">2</span><span class="p">;</span>
    <span class="k">if</span><span class="p">(</span><span class="n">y</span> <span class="o">+</span> <span class="mi">1</span> <span class="o">&gt;=</span> <span class="n">M</span><span class="p">)</span>
        <span class="n">re</span><span class="p">.</span><span class="n">Y</span> <span class="o">=</span> <span class="p">(</span><span class="n">T</span><span class="p">[</span><span class="n">x</span> <span class="o">*</span> <span class="n">M</span> <span class="o">+</span> <span class="n">y</span><span class="p">]</span> <span class="o">-</span> <span class="n">T</span><span class="p">[</span><span class="n">x</span> <span class="o">*</span> <span class="n">M</span> <span class="o">+</span> <span class="n">y</span> <span class="o">-</span> <span class="mi">1</span><span class="p">]);</span>
    <span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="n">y</span> <span class="o">-</span> <span class="mi">1</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span>
        <span class="n">re</span><span class="p">.</span><span class="n">Y</span> <span class="o">=</span> <span class="p">(</span><span class="n">T</span><span class="p">[</span><span class="n">x</span> <span class="o">*</span> <span class="n">M</span> <span class="o">+</span> <span class="n">y</span> <span class="o">+</span> <span class="mi">1</span><span class="p">]</span> <span class="o">-</span> <span class="n">T</span><span class="p">[</span><span class="n">x</span> <span class="o">*</span> <span class="n">M</span> <span class="o">+</span> <span class="n">y</span><span class="p">]);</span>
    <span class="k">else</span>
        <span class="n">re</span><span class="p">.</span><span class="n">Y</span> <span class="o">=</span> <span class="p">(</span><span class="n">T</span><span class="p">[</span><span class="n">x</span> <span class="o">*</span> <span class="n">M</span> <span class="o">+</span> <span class="n">y</span> <span class="o">+</span> <span class="mi">1</span><span class="p">]</span> <span class="o">-</span> <span class="n">T</span><span class="p">[</span><span class="n">x</span> <span class="o">*</span> <span class="n">M</span> <span class="o">+</span> <span class="n">y</span> <span class="o">-</span> <span class="mi">1</span><span class="p">])</span> <span class="o">/</span> <span class="mi">2</span><span class="p">;</span>
    <span class="k">return</span> <span class="n">re</span><span class="p">;</span>
<span class="p">}</span>

<span class="n">pair</span><span class="o">&lt;</span><span class="n">Vec3f</span><span class="p">,</span> <span class="n">Vec3f</span><span class="o">&gt;</span> <span class="n">GradI</span><span class="p">(</span><span class="kt">int</span> <span class="n">x</span><span class="p">,</span> <span class="kt">int</span> <span class="n">y</span><span class="p">){</span>
    <span class="k">static</span> <span class="n">pair</span><span class="o">&lt;</span><span class="n">Vec3f</span><span class="p">,</span> <span class="n">Vec3f</span><span class="o">&gt;</span> <span class="n">re</span><span class="p">;</span>
    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">k</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">k</span> <span class="o">&lt;</span> <span class="mi">3</span><span class="p">;</span> <span class="n">k</span> <span class="o">++</span><span class="p">){</span>
        <span class="k">if</span><span class="p">(</span><span class="n">x</span> <span class="o">+</span> <span class="mi">1</span> <span class="o">&gt;=</span> <span class="n">N</span> <span class="o">||</span> <span class="n">f</span><span class="p">[(</span><span class="n">x</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span> <span class="o">*</span> <span class="n">M</span> <span class="o">+</span> <span class="n">y</span><span class="p">]</span> <span class="o">==</span> <span class="n">INSIDE</span><span class="p">)</span>
            <span class="k">if</span><span class="p">(</span><span class="n">x</span> <span class="o">-</span> <span class="mi">1</span> <span class="o">&lt;</span> <span class="mi">0</span> <span class="o">||</span> <span class="n">f</span><span class="p">[(</span><span class="n">x</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="o">*</span> <span class="n">M</span> <span class="o">+</span> <span class="n">y</span><span class="p">]</span> <span class="o">==</span> <span class="n">INSIDE</span><span class="p">)</span>
                <span class="n">re</span><span class="p">.</span><span class="n">X</span><span class="p">[</span><span class="n">k</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
            <span class="k">else</span>
                <span class="n">re</span><span class="p">.</span><span class="n">X</span><span class="p">[</span><span class="n">k</span><span class="p">]</span> <span class="o">=</span> <span class="p">((</span><span class="kt">float</span><span class="p">)</span><span class="n">img</span><span class="p">.</span><span class="n">at</span><span class="o">&lt;</span><span class="n">Vec3b</span><span class="o">&gt;</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">)[</span><span class="n">k</span><span class="p">]</span> <span class="o">-</span> <span class="n">img</span><span class="p">.</span><span class="n">at</span><span class="o">&lt;</span><span class="n">Vec3b</span><span class="o">&gt;</span><span class="p">(</span><span class="n">x</span> <span class="o">-</span> <span class="mi">1</span><span class="p">,</span> <span class="n">y</span><span class="p">)[</span><span class="n">k</span><span class="p">]);</span>
        <span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="n">x</span> <span class="o">-</span> <span class="mi">1</span> <span class="o">&lt;</span> <span class="mi">0</span> <span class="o">||</span> <span class="n">f</span><span class="p">[(</span><span class="n">x</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="o">*</span> <span class="n">M</span> <span class="o">+</span> <span class="n">y</span><span class="p">]</span> <span class="o">==</span> <span class="n">INSIDE</span><span class="p">)</span>
            <span class="n">re</span><span class="p">.</span><span class="n">X</span><span class="p">[</span><span class="n">k</span><span class="p">]</span> <span class="o">=</span> <span class="p">((</span><span class="kt">float</span><span class="p">)</span><span class="n">img</span><span class="p">.</span><span class="n">at</span><span class="o">&lt;</span><span class="n">Vec3b</span><span class="o">&gt;</span><span class="p">(</span><span class="n">x</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="n">y</span><span class="p">)[</span><span class="n">k</span><span class="p">]</span> <span class="o">-</span> <span class="n">img</span><span class="p">.</span><span class="n">at</span><span class="o">&lt;</span><span class="n">Vec3b</span><span class="o">&gt;</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">)[</span><span class="n">k</span><span class="p">]);</span>
        <span class="k">else</span>
            <span class="n">re</span><span class="p">.</span><span class="n">X</span><span class="p">[</span><span class="n">k</span><span class="p">]</span> <span class="o">=</span> <span class="p">((</span><span class="kt">float</span><span class="p">)</span><span class="n">img</span><span class="p">.</span><span class="n">at</span><span class="o">&lt;</span><span class="n">Vec3b</span><span class="o">&gt;</span><span class="p">(</span><span class="n">x</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="n">y</span><span class="p">)[</span><span class="n">k</span><span class="p">]</span> <span class="o">-</span> <span class="n">img</span><span class="p">.</span><span class="n">at</span><span class="o">&lt;</span><span class="n">Vec3b</span><span class="o">&gt;</span><span class="p">(</span><span class="n">x</span> <span class="o">-</span> <span class="mi">1</span><span class="p">,</span> <span class="n">y</span><span class="p">)[</span><span class="n">k</span><span class="p">])</span> <span class="o">/</span> <span class="mi">2</span><span class="p">;</span>
        <span class="k">if</span><span class="p">(</span><span class="n">y</span> <span class="o">+</span> <span class="mi">1</span> <span class="o">&gt;=</span> <span class="n">M</span> <span class="o">||</span> <span class="n">f</span><span class="p">[</span><span class="n">x</span> <span class="o">*</span> <span class="n">M</span> <span class="o">+</span> <span class="n">y</span> <span class="o">+</span> <span class="mi">1</span><span class="p">]</span> <span class="o">==</span> <span class="n">INSIDE</span><span class="p">)</span>
            <span class="k">if</span><span class="p">(</span><span class="n">y</span> <span class="o">-</span> <span class="mi">1</span> <span class="o">&lt;</span> <span class="mi">0</span> <span class="o">||</span> <span class="n">f</span><span class="p">[</span><span class="n">x</span> <span class="o">*</span> <span class="n">M</span> <span class="o">+</span> <span class="n">y</span> <span class="o">-</span> <span class="mi">1</span><span class="p">]</span> <span class="o">==</span> <span class="n">INSIDE</span><span class="p">)</span>
                <span class="n">re</span><span class="p">.</span><span class="n">Y</span><span class="p">[</span><span class="n">k</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
            <span class="k">else</span>
                <span class="n">re</span><span class="p">.</span><span class="n">Y</span><span class="p">[</span><span class="n">k</span><span class="p">]</span> <span class="o">=</span> <span class="p">((</span><span class="kt">float</span><span class="p">)</span><span class="n">img</span><span class="p">.</span><span class="n">at</span><span class="o">&lt;</span><span class="n">Vec3b</span><span class="o">&gt;</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">)[</span><span class="n">k</span><span class="p">]</span> <span class="o">-</span> <span class="n">img</span><span class="p">.</span><span class="n">at</span><span class="o">&lt;</span><span class="n">Vec3b</span><span class="o">&gt;</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)[</span><span class="n">k</span><span class="p">]);</span>
        <span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="n">y</span> <span class="o">-</span> <span class="mi">1</span> <span class="o">&lt;</span> <span class="mi">0</span> <span class="o">||</span> <span class="n">f</span><span class="p">[</span><span class="n">x</span> <span class="o">*</span> <span class="n">M</span> <span class="o">+</span> <span class="n">y</span> <span class="o">-</span> <span class="mi">1</span><span class="p">]</span> <span class="o">==</span> <span class="n">INSIDE</span><span class="p">)</span>
            <span class="n">re</span><span class="p">.</span><span class="n">Y</span><span class="p">[</span><span class="n">k</span><span class="p">]</span> <span class="o">=</span> <span class="p">((</span><span class="kt">float</span><span class="p">)</span><span class="n">img</span><span class="p">.</span><span class="n">at</span><span class="o">&lt;</span><span class="n">Vec3b</span><span class="o">&gt;</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)[</span><span class="n">k</span><span class="p">]</span> <span class="o">-</span> <span class="n">img</span><span class="p">.</span><span class="n">at</span><span class="o">&lt;</span><span class="n">Vec3b</span><span class="o">&gt;</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">)[</span><span class="n">k</span><span class="p">]);</span>
        <span class="k">else</span>
            <span class="n">re</span><span class="p">.</span><span class="n">Y</span><span class="p">[</span><span class="n">k</span><span class="p">]</span> <span class="o">=</span> <span class="p">((</span><span class="kt">float</span><span class="p">)</span><span class="n">img</span><span class="p">.</span><span class="n">at</span><span class="o">&lt;</span><span class="n">Vec3b</span><span class="o">&gt;</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)[</span><span class="n">k</span><span class="p">]</span> <span class="o">-</span> <span class="n">img</span><span class="p">.</span><span class="n">at</span><span class="o">&lt;</span><span class="n">Vec3b</span><span class="o">&gt;</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)[</span><span class="n">k</span><span class="p">])</span> <span class="o">/</span> <span class="mi">2</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="n">re</span><span class="p">;</span>
<span class="p">}</span>

<span class="kt">void</span> <span class="nf">inpaint</span><span class="p">(</span><span class="kt">int</span> <span class="n">x</span><span class="p">,</span> <span class="kt">int</span> <span class="n">y</span><span class="p">){</span>
    <span class="k">static</span> <span class="kt">int</span> <span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">;</span>
    <span class="k">static</span> <span class="n">pair</span><span class="o">&lt;</span><span class="kt">int</span><span class="p">,</span> <span class="kt">int</span><span class="o">&gt;</span> <span class="n">r</span><span class="p">;</span>
    <span class="k">static</span> <span class="n">pair</span><span class="o">&lt;</span><span class="kt">float</span><span class="p">,</span> <span class="kt">float</span><span class="o">&gt;</span> <span class="n">gradT</span><span class="p">;</span>
    <span class="k">static</span> <span class="n">pair</span><span class="o">&lt;</span><span class="n">Vec3f</span><span class="p">,</span> <span class="n">Vec3f</span><span class="o">&gt;</span> <span class="n">gradI</span><span class="p">;</span>
    <span class="k">static</span> <span class="kt">float</span> <span class="n">dir</span><span class="p">,</span> <span class="n">dst</span><span class="p">,</span> <span class="n">lev</span><span class="p">,</span> <span class="n">w</span><span class="p">;</span>
    <span class="n">Vec3f</span> <span class="n">Ia</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
    <span class="kt">float</span> <span class="n">s</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="n">gradT</span> <span class="o">=</span> <span class="n">GradT</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">);</span>
    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">t</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">t</span> <span class="o">&lt;=</span> <span class="n">Btop</span><span class="p">;</span> <span class="n">t</span> <span class="o">++</span><span class="p">){</span>
        <span class="n">i</span> <span class="o">=</span> <span class="n">x</span> <span class="o">+</span> <span class="n">B</span><span class="p">[</span><span class="n">t</span><span class="p">][</span><span class="mi">0</span><span class="p">],</span> <span class="n">j</span> <span class="o">=</span> <span class="n">y</span> <span class="o">+</span> <span class="n">B</span><span class="p">[</span><span class="n">t</span><span class="p">][</span><span class="mi">1</span><span class="p">];</span>
        <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="n">Check</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">)</span> <span class="o">||</span> <span class="n">f</span><span class="p">[</span><span class="n">i</span> <span class="o">*</span> <span class="n">M</span> <span class="o">+</span> <span class="n">j</span><span class="p">]</span> <span class="o">==</span> <span class="n">INSIDE</span><span class="p">)</span>
            <span class="k">continue</span><span class="p">;</span>
        <span class="n">r</span> <span class="o">=</span> <span class="n">make_pair</span><span class="p">(</span><span class="n">B</span><span class="p">[</span><span class="n">t</span><span class="p">][</span><span class="mi">0</span><span class="p">],</span> <span class="n">B</span><span class="p">[</span><span class="n">t</span><span class="p">][</span><span class="mi">1</span><span class="p">]);</span>
        <span class="n">dir</span> <span class="o">=</span> <span class="n">fabs</span><span class="p">(</span><span class="n">r</span><span class="p">.</span><span class="n">X</span> <span class="o">*</span> <span class="n">gradT</span><span class="p">.</span><span class="n">X</span> <span class="o">+</span> <span class="n">r</span><span class="p">.</span><span class="n">Y</span> <span class="o">*</span> <span class="n">gradT</span><span class="p">.</span><span class="n">Y</span><span class="p">)</span> <span class="o">/</span> <span class="n">sqrt</span><span class="p">(</span><span class="n">r</span><span class="p">.</span><span class="n">X</span> <span class="o">*</span> <span class="n">r</span><span class="p">.</span><span class="n">X</span> <span class="o">+</span> <span class="n">r</span><span class="p">.</span><span class="n">Y</span> <span class="o">*</span> <span class="n">r</span><span class="p">.</span><span class="n">Y</span><span class="p">);</span>
        <span class="n">dst</span> <span class="o">=</span> <span class="mf">1.0</span> <span class="o">/</span> <span class="p">(</span><span class="n">r</span><span class="p">.</span><span class="n">X</span> <span class="o">*</span> <span class="n">r</span><span class="p">.</span><span class="n">X</span> <span class="o">+</span> <span class="n">r</span><span class="p">.</span><span class="n">Y</span> <span class="o">*</span> <span class="n">r</span><span class="p">.</span><span class="n">Y</span><span class="p">);</span>
        <span class="n">lev</span> <span class="o">=</span> <span class="mf">1.0</span> <span class="o">/</span> <span class="p">(</span><span class="mi">1</span> <span class="o">+</span> <span class="n">fabs</span><span class="p">(</span><span class="n">T</span><span class="p">[</span><span class="n">x</span> <span class="o">*</span> <span class="n">M</span> <span class="o">+</span> <span class="n">y</span><span class="p">]</span> <span class="o">-</span> <span class="n">T</span><span class="p">[</span><span class="n">i</span> <span class="o">*</span> <span class="n">M</span> <span class="o">+</span> <span class="n">j</span><span class="p">]));</span>
        <span class="n">w</span> <span class="o">=</span> <span class="n">dir</span> <span class="o">*</span> <span class="n">dst</span> <span class="o">*</span> <span class="n">lev</span><span class="p">;</span>

        <span class="n">gradI</span> <span class="o">=</span> <span class="n">GradI</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">);</span>
        <span class="n">Ia</span> <span class="o">+=</span> <span class="n">w</span> <span class="o">*</span> <span class="p">((</span><span class="n">Vec3f</span><span class="p">)</span><span class="n">img</span><span class="p">.</span><span class="n">at</span><span class="o">&lt;</span><span class="n">Vec3b</span><span class="o">&gt;</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">)</span> <span class="o">+</span> <span class="p">(</span><span class="n">gradI</span><span class="p">.</span><span class="n">X</span> <span class="o">*</span> <span class="n">r</span><span class="p">.</span><span class="n">X</span> <span class="o">+</span> <span class="n">gradI</span><span class="p">.</span><span class="n">Y</span> <span class="o">*</span> <span class="n">r</span><span class="p">.</span><span class="n">Y</span><span class="p">));</span>
        <span class="n">s</span> <span class="o">+=</span> <span class="n">w</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="n">img</span><span class="p">.</span><span class="n">at</span><span class="o">&lt;</span><span class="n">Vec3b</span><span class="o">&gt;</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">)</span> <span class="o">=</span> <span class="p">(</span><span class="n">Vec3b</span><span class="p">)(</span><span class="n">Ia</span> <span class="o">/</span> <span class="n">s</span><span class="p">);</span>
<span class="p">}</span>

<span class="kt">void</span> <span class="nf">Solve</span><span class="p">(){</span>
    <span class="kt">int</span> <span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">;</span>
    <span class="n">pair</span><span class="o">&lt;</span><span class="kt">int</span><span class="p">,</span> <span class="kt">int</span><span class="o">&gt;</span> <span class="n">p</span><span class="p">;</span>
    
    <span class="k">while</span><span class="p">(</span><span class="o">!</span><span class="n">ToBeInpainted</span><span class="p">.</span><span class="n">empty</span><span class="p">()){</span>
        <span class="n">p</span> <span class="o">=</span> <span class="n">ToBeInpainted</span><span class="p">.</span><span class="n">front</span><span class="p">();</span>
        <span class="n">ToBeInpainted</span><span class="p">.</span><span class="n">pop</span><span class="p">();</span>
        <span class="n">i</span> <span class="o">=</span> <span class="n">p</span><span class="p">.</span><span class="n">X</span><span class="p">,</span> <span class="n">j</span> <span class="o">=</span> <span class="n">p</span><span class="p">.</span><span class="n">Y</span><span class="p">;</span>
        <span class="n">f</span><span class="p">[</span><span class="n">i</span> <span class="o">*</span> <span class="n">M</span> <span class="o">+</span> <span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="n">KNOWN</span><span class="p">;</span>
        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">k</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">k</span> <span class="o">&lt;</span> <span class="mi">4</span><span class="p">;</span> <span class="n">k</span> <span class="o">++</span><span class="p">){</span>
            <span class="kt">int</span> <span class="n">ii</span> <span class="o">=</span> <span class="n">i</span> <span class="o">+</span> <span class="n">To</span><span class="p">[</span><span class="n">k</span><span class="p">][</span><span class="mi">0</span><span class="p">],</span> <span class="n">jj</span> <span class="o">=</span> <span class="n">j</span> <span class="o">+</span> <span class="n">To</span><span class="p">[</span><span class="n">k</span><span class="p">][</span><span class="mi">0</span><span class="p">];</span>
            <span class="k">if</span><span class="p">(</span><span class="n">Check</span><span class="p">(</span><span class="n">ii</span><span class="p">,</span> <span class="n">jj</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="n">f</span><span class="p">[</span><span class="n">ii</span> <span class="o">*</span> <span class="n">M</span> <span class="o">+</span> <span class="n">jj</span><span class="p">]</span> <span class="o">==</span> <span class="n">INSIDE</span><span class="p">){</span>
                <span class="n">inpaint</span><span class="p">(</span><span class="n">ii</span><span class="p">,</span> <span class="n">jj</span><span class="p">);</span>
                <span class="n">f</span><span class="p">[</span><span class="n">ii</span> <span class="o">*</span> <span class="n">M</span> <span class="o">+</span> <span class="n">jj</span><span class="p">]</span> <span class="o">=</span> <span class="n">BAND</span><span class="p">;</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>
    
<span class="p">}</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">(){</span>

    <span class="n">Init</span><span class="p">();</span>
    <span class="n">Solve</span><span class="p">();</span>

    <span class="n">imshow</span><span class="p">(</span><span class="s">"output"</span><span class="p">,</span> <span class="n">img</span><span class="p">);</span>
    <span class="n">imwrite</span><span class="p">(</span><span class="n">output_path</span> <span class="o">+</span> <span class="s">"inpainted.jpg"</span><span class="p">,</span> <span class="n">img</span><span class="p">);</span>
    <span class="n">waitKey</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>

    <span class="n">Mat</span> <span class="n">imgdst</span><span class="p">(</span><span class="n">img</span><span class="p">.</span><span class="n">rows</span><span class="p">,</span> <span class="n">img</span><span class="p">.</span><span class="n">cols</span><span class="p">,</span> <span class="n">CV_8UC3</span><span class="p">);</span>

    <span class="n">inpaint</span><span class="p">(</span><span class="n">img</span><span class="p">,</span> <span class="n">mask</span><span class="p">,</span> <span class="n">imgdst</span><span class="p">,</span> <span class="n">epsilon</span><span class="p">,</span> <span class="n">INPAINT_TELEA</span><span class="p">);</span>
    <span class="n">imshow</span><span class="p">(</span><span class="s">"cv_inpaint"</span><span class="p">,</span> <span class="n">imgdst</span><span class="p">);</span>
    <span class="n">imwrite</span><span class="p">(</span><span class="n">output_path</span> <span class="o">+</span> <span class="s">"cv_inpaint.jpg"</span><span class="p">,</span> <span class="n">imgdst</span><span class="p">);</span>
    <span class="n">waitKey</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>

    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

:ET