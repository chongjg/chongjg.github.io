I"Y0<ul>
  <li>（数字图像处理的第一个作业，结果是赶着完成的，看两篇论文并且实现搞了八个小时，最后剩两个小时写报告，深深为自己英文水平着急，草草结尾还晚交了几分钟。裂开来。</li>
</ul>

<h2 id="1histogram-equalization">1.Histogram Equalization</h2>

<ul>
  <li>
    <p>这个算法简称<strong>HE</strong>或者<strong>GHE(Global ~)</strong></p>
  </li>
  <li>
    <p>算法的思想非常简单，一个灰度图的直方图往往是不均匀的，这样对比度往往不高，我们要是能够使它的直方图变得更加均匀（比如每个灰度值的像素个数一样，它的对比度应该会比较好）。</p>
  </li>
  <li>
    <p>下面是在网上找的一张图片以及它的直方图。</p>
  </li>
</ul>

<p><img src="https://github.com/chongjg/chongjg.github.io/blob/master/img/Contrast-enhancement/origin.jpg" alt="" /></p>

<p><img src="https://github.com/chongjg/chongjg.github.io/blob/master/img/Contrast-enhancement/origin-hist.jpg" alt="" /></p>

<ul>
  <li>
    <p>从上图的直方图中可以看到，像素的分布非常不均匀，绝大多数像素都是灰度值很小的。</p>
  </li>
  <li>
    <p>通俗地讲，<strong>HE</strong>算法的思想就是让直方图中每个柱子进行不改变顺序的移动（可以合并，不能拆分），使得每个柱子的高度和它占用的灰度数相当。</p>
  </li>
  <li>
    <p>从算法实现上讲，令<script type="math/tex">cnt(i),(0\leq i\leq 255)</script>表示图像每个灰度值的像素数量，<script type="math/tex">sum(i)</script>是<script type="math/tex">cnt</script>的前缀和。那么只需要把原本的灰度值<script type="math/tex">i</script>改成新的灰度值<script type="math/tex">sum(i)*255/sum(N)</script>即可。</p>
  </li>
  <li>
    <p>算法的结果如下图所示</p>
  </li>
</ul>

<p><img src="https://github.com/chongjg/chongjg.github.io/blob/master/img/Contrast-enhancement/GHE.jpg" alt="" /></p>

<p><img src="https://github.com/chongjg/chongjg.github.io/blob/master/img/Contrast-enhancement/GHE-hist.jpg" alt="" /></p>

<ul>
  <li>
    <p>可以明显地看到直方图的柱子被移动得更均匀了，也就是柱子的高度和占的灰度数成正比了。</p>
  </li>
  <li>
    <p>然而，也可以明显看到这个算法的不足，图像明暗分界处对比度被过分增强，而明和暗各自内部的对比度并没有得到很好的增强。从直方图上可以看出来，使用HE算法时，如果图像中存在非常多的某个灰度值的像素，那么就会导致非常多的灰度值不能被使用，从而有些地方对比度过大显得不自然，而有的地方对比度又没能得到很好的提高。</p>
  </li>
  <li>
    <p>为了解决这个问题，我们需要找到一个把“柱子”拆分的方法。</p>
  </li>
</ul>

<h2 id="2neighborhood-metrics">2.Neighborhood Metrics</h2>

<ul>
  <li>
    <p>这一部分内容来自论文<a href="https://www.researchgate.net/publication/224209864_Image_Contrast_Enhancement_using_Bi-Histogram_Equalization_with_Neighborhood_Metrics?enrichId=rgreq-319bc3ef6eb4fa0f9f562c5ffd925e65-XXX&amp;enrichSource=Y292ZXJQYWdlOzIyNDIwOTg2NDtBUzo0NTY1MTE5MTU4NTk5NjhAMTQ4NTg1MjMzMDAzOQ%3D%3D&amp;el=1_x_3&amp;_esc=publicationCoverPdf">《Image Contrast Enhancement using Bi-Histogram Equalization with Neighborhood Metrics》</a></p>
  </li>
  <li>
    <p>考虑如何拆分柱子，实际上就是考虑怎么给柱子里包含的像素分配权值进行一个排序，然后分配灰度值的时候就可以不用全分配一个，而且可以按照权值挨个分配更好地利用灰度值提高对比度。</p>
  </li>
</ul>

<h3 id="21-voting-metric">2.1 Voting Metric</h3>

<ul>
  <li>
    <p>这是论文中提到第一个算法，很好理解，就是看自己的周围<script type="math/tex">8</script>个像素，比自己黑的有多少个，本着提高对比度的原则，周围比自己黑的越多，就应该在柱子里尽量分配更白的颜色。</p>
  </li>
  <li>
    <p>可以看作每个像素有了一个权值，然后每个柱子根据权值内部排序，每个柱子最多拆分成<script type="math/tex">9</script>段（拆分效果如下图），之后再对这些拆分的柱子进行HE算法即可。</p>
  </li>
</ul>

<p><img src="https://github.com/chongjg/chongjg.github.io/blob/master/img/Contrast-enhancement/Voting-1.png" alt="" /></p>

<ul>
  <li>按照上述思想可以得到以下结果</li>
</ul>

<p><img src="https://github.com/chongjg/chongjg.github.io/blob/master/img/Contrast-enhancement/HE-Voting.jpg" alt="" /></p>

<p><img src="https://github.com/chongjg/chongjg.github.io/blob/master/img/Contrast-enhancement/HE-Voting-hist.jpg" alt="" /></p>

<ul>
  <li>可以看到，在这幅图中，最高的柱子高度基本没变，这是因为纯黑周围不会有比它黑的，所以纯黑的柱子在这个算法下无法被拆分，还可以看到灰度值较大的区域得到了一定的平滑。不过从图片上来说没有肉眼可见变化。</li>
</ul>

<h3 id="22-contrast-difference-metric">2.2 Contrast Difference Metric</h3>

<ul>
  <li>
    <p>这个算法是在刚刚算法的基础上进行再次拆分，<script type="math/tex">2.1</script>能够把一个柱子拆成最多<script type="math/tex">9</script>个，而这个算法在刚刚<strong>拆分完的基础上</strong>再进行拆分。</p>
  </li>
  <li>
    <p>这个算法是计算周围比自己灰度值小的像素平均比自己小多少，以及比自己大的像素平均比自己大多少，分别记作<script type="math/tex">left\;average\;difference(L.a.d)</script>和<script type="math/tex">right\;average\;difference(R.a.d)</script>。</p>
  </li>
  <li>
    <p>设置一个阈值，当<script type="math/tex">% <![CDATA[
L.a.d<Threshold<R.a.d %]]></script>时权值设置为<script type="math/tex">1</script>，当<script type="math/tex">L.a.d>Threshold>R.a.d</script>时权值设置为<script type="math/tex">3</script>，否则为<script type="math/tex">2</script>。</p>
  </li>
  <li>
    <p>拆分效果如下图所示</p>
  </li>
</ul>

<p><img src="https://github.com/chongjg/chongjg.github.io/blob/master/img/Contrast-enhancement/Contrast-1.png" alt="" /></p>

<ul>
  <li>按照上述思想实现，可以得到以下结果</li>
</ul>

<p><img src="https://github.com/chongjg/chongjg.github.io/blob/master/img/Contrast-enhancement/HE-Contrast.jpg" alt="" /></p>

<p><img src="https://github.com/chongjg/chongjg.github.io/blob/master/img/Contrast-enhancement/HE-Contrast-hist.jpg" alt="" /></p>

<ul>
  <li>然而很不幸的是，这个改进效果甚微，几乎看不到一点差别。</li>
</ul>

<h3 id="23-neighborhood-distinction-metric">2.3 Neighborhood Distinction Metric</h3>

<ul>
  <li>
    <p>这个算法综合了上述两个算法，给出一个更加简单的实现方式。直接给每个像素分配权值为周围灰度值比它小的像素与他差的和，这样一来一个柱子最多能够被拆分为<script type="math/tex">2041</script>个柱子了。</p>
  </li>
  <li>
    <p>按照上述思想实现得到以下结果</p>
  </li>
</ul>

<p><img src="https://github.com/chongjg/chongjg.github.io/blob/master/img/Contrast-enhancement/HE-Neighborhood.jpg" alt="" /></p>

<p><img src="https://github.com/chongjg/chongjg.github.io/blob/master/img/Contrast-enhancement/HE-Neighborhood-hist.jpg" alt="" /></p>

<ul>
  <li>可以看到在直方图右部由于更细的拆分使得灰度分布更加的平滑了。只是在图片中依然没有太多体现。</li>
</ul>

<h3 id="24-总结">2.4 总结</h3>

<ul>
  <li>从上面可以看出，仅仅靠拆分柱子来提高对比度是不够的，当图片中某一些像素灰度值全都一样，却不表达任何意义的时候，这些像素会占用大量的灰度值区间，却不对图像效果做出贡献。为了改变这一状况，就需要把一些不重要的像素忽略，把一些重要的像素着重考虑。</li>
</ul>

<h2 id="3pixel-weight">3.Pixel Weight</h2>

<ul>
  <li>
    <p>基于<script type="math/tex">2.4</script>的思考，原本我们进行直方图统计时，一个像素算一个，并按照像素的多少来划分应该占多少灰度值。然而一副图片中可能很多像素都是没有意义的，比如一大块连续的黑色，就让他保持黑色就挺好，不需要考虑改进它的对比度。因此我们可以给像素引入权重，有的不重要的像素可以算半个甚至零个，有的很重要的像素可以算两个五个等等。于是权重的设置就成了一个研究的问题。</p>
  </li>
  <li>
    <p>而且有一点很重要的是，HE以及<script type="math/tex">2.1,2.2</script>的算法和我们如何设置权值并不冲突，也就是说我们可以随意地组合拆分方法和权值方法。</p>
  </li>
</ul>

<h3 id="31-gradient">3.1 Gradient</h3>

<ul>
  <li>通常认为图像的边缘提供信息，于是可以考虑使用梯度作为像素的权值。拆分方式选择<script type="math/tex">2.2</script>，结果为</li>
</ul>

<p><img src="https://github.com/chongjg/chongjg.github.io/blob/master/img/Contrast-enhancement/Grad-HE-Contrast.jpg" alt="" /></p>

<p><img src="https://github.com/chongjg/chongjg.github.io/blob/master/img/Contrast-enhancement/Grad-HE-Contrast-hist.jpg" alt="" /></p>

<ul>
  <li>可以很明显的看到图像对比度相比之前有了较大的提升，从直方图也可以看出占有大部分像素的最高柱子不再占有大片的灰度值，这样使其他区域的对比度得到了增强。</li>
</ul>

<h3 id="32-log-gradient">3.2 log Gradient</h3>

<ul>
  <li>这个想法是观察到有的像素梯度过大，为了抑制单个像素权值过大，我们可以使用<script type="math/tex">\log(gradient+1)</script>的方式替代梯度。结合拆分方式<script type="math/tex">2.2</script>，最后结果为</li>
</ul>

<p><img src="https://github.com/chongjg/chongjg.github.io/blob/master/img/Contrast-enhancement/logGrad-HE-Contrast.jpg" alt="" /></p>

<p><img src="https://github.com/chongjg/chongjg.github.io/blob/master/img/Contrast-enhancement/logGrad-HE-Contrast-hist.jpg" alt="" /></p>

<ul>
  <li>对比<script type="math/tex">3.1</script>可以发现图像整体亮度得到提高，很多原本完全看不到的细节也开始展现出来。已经达到了比较好的效果。</li>
</ul>

<h3 id="33-contrast-accumulated">3.3 CONTRAST-ACCUMULATED</h3>

<ul>
  <li>
    <p>这个方法来自论文<a href="https://www.researchgate.net/publication/323349746_Contrast-accumulated_histogram_equalization_for_image_enhancement?enrichId=rgreq-3df2813a03f08e26ebb9c7759f0a5618-XXX&amp;enrichSource=Y292ZXJQYWdlOzMyMzM0OTc0NjtBUzo1OTg4OTc1NDYyNDAwMDFAMTUxOTc5OTcxMDA5Mg%3D%3D&amp;el=1_x_3&amp;_esc=publicationCoverPdf">《CONTRAST-ACCUMULATED HISTOGRAM EQUALIZATION FOR IMAGE ENHANCEMENT》</a></p>
  </li>
  <li>
    <p>实际上算法的步骤很简单：</p>
  </li>
  <li>
    <p>第一步：把图片<script type="math/tex">\mathbf A</script>等比例缩放使行、列数小的为256得到图片<script type="math/tex">\mathbf B_1</script>(我写代码时直接让行数为256)</p>
  </li>
  <li>
    <p>第二步：把图片<script type="math/tex">\mathbf B_1</script>列数、行数除<script type="math/tex">2</script>得到<script type="math/tex">\mathbf B_2</script>，以此类推直到<script type="math/tex">\mathbf B_l</script>。</p>
  </li>
  <li>
    <p>第三步：</p>
  </li>
</ul>

<script type="math/tex; mode=display">\varphi_l(q)=-\sum_{q'\in \mathcal N(q)}\min\Big(\frac{\mathbf B_l(q)-\mathbf B_l(q')}{255},0\Big),(l=1,...,L)</script>

<ul>
  <li>
    <p>其中<script type="math/tex">q</script>是图像中的二维坐标，<script type="math/tex">\mathcal N(q)</script>是<script type="math/tex">q</script>的曼哈顿距离下的近邻，这里取上下左右四个。</p>
  </li>
  <li>
    <p>第四步：对<script type="math/tex">\varphi_l(q)</script>通过双三次插值变换到原图像<script type="math/tex">\mathbf A</script>的大小，记作<script type="math/tex">\varphi_l'(x,y)</script>。</p>
  </li>
  <li>
    <p>第五步：权值为</p>
  </li>
</ul>

<script type="math/tex; mode=display">\Phi(x,y)=\Bigg(\times_{l=1}^L\max(\varphi_l'(x,y))\Bigg)</script>

:ET